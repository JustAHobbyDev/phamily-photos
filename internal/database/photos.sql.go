// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: photos.sql

package database

import (
	"context"
	"time"
)

const createPhoto = `-- name: CreatePhoto :one
INSERT INTO photos (id, created_at, updated_at, modified_at, name, alt_text, url, thumb_url, user_id)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, created_at, updated_at, modified_at, name, alt_text, url, thumb_url, user_id
`

type CreatePhotoParams struct {
	ID         string
	CreatedAt  time.Time
	UpdatedAt  time.Time
	ModifiedAt time.Time
	Name       string
	AltText    string
	Url        string
	ThumbUrl   string
	UserID     string
}

func (q *Queries) CreatePhoto(ctx context.Context, arg CreatePhotoParams) (Photo, error) {
	row := q.db.QueryRowContext(ctx, createPhoto,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ModifiedAt,
		arg.Name,
		arg.AltText,
		arg.Url,
		arg.ThumbUrl,
		arg.UserID,
	)
	var i Photo
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ModifiedAt,
		&i.Name,
		&i.AltText,
		&i.Url,
		&i.ThumbUrl,
		&i.UserID,
	)
	return i, err
}

const getPhotosByUser = `-- name: GetPhotosByUser :many
SELECT p.id, p.created_at, p.updated_at, modified_at, p.name, alt_text, url, thumb_url, user_id, u.id, u.created_at, u.updated_at, u.name, apikey FROM photos as p 
JOIN users as u ON p.user_id = u.id 
WHERE u.id=$1
ORDER BY p.created_at DESC
LIMIT $2
`

type GetPhotosByUserParams struct {
	ID    string
	Limit int32
}

type GetPhotosByUserRow struct {
	ID          string
	CreatedAt   time.Time
	UpdatedAt   time.Time
	ModifiedAt  time.Time
	Name        string
	AltText     string
	Url         string
	ThumbUrl    string
	UserID      string
	ID_2        string
	CreatedAt_2 time.Time
	UpdatedAt_2 time.Time
	Name_2      string
	Apikey      string
}

func (q *Queries) GetPhotosByUser(ctx context.Context, arg GetPhotosByUserParams) ([]GetPhotosByUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getPhotosByUser, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPhotosByUserRow
	for rows.Next() {
		var i GetPhotosByUserRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ModifiedAt,
			&i.Name,
			&i.AltText,
			&i.Url,
			&i.ThumbUrl,
			&i.UserID,
			&i.ID_2,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.Name_2,
			&i.Apikey,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
